EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
Final_Compiled_Code.exe -- emu8086 assembler version: 4.08  
 
[ 6/10/2025  --  12:08:41 AM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ; ========================================
[   2]        :                                       ; Fuzzy Logic Washing Machine Controller (8086 Assembly)
[   3]        :                                       ; ========================================
[   4]        :                                       
[   5]        :                                       ;============================= NEW RULE BASE =============================
[   6]        :                                       ; Rule 0 - If Load is small AND Dirtiness is light         ? Spin Speed: Low,   Duration: Short
[   7]        :                                       ; Rule 1 - If Load is medium AND Fabric is normal          ? Spin Speed: Medium, Duration: Medium
[   8]        :                                       ; Rule 2 - If Load is large AND Fabric is tough            ? Spin Speed: High,   Duration: Long
[   9]        :                                       
[  10]        :                                       ; Rule 3 - If Fabric is delicate AND Temperature is cold   ? Spin Speed: Low     (gentle + fragile)
[  11]        :                                       ; Rule 4 - If Fabric is tough AND Temperature is hot       ? Spin Speed: High    (strong fabric, fast spin)
[  12]        :                                       
[  13]        :                                       ; Rule 5 - If Dirtiness is heavy AND Temperature is warm   ? Duration: Long      (heavy dirt + effective temp)
[  14]        :                                       ; Rule 6 - If Dirtiness is medium AND Load is medium       ? Duration: Medium    (balanced case)
[  15]        :                                       ; Rule 7 - If Dirtiness is light AND Fabric is normal      ? Duration: Short     (clean + average fabric)
[  16]        :                                       
[  17]        :                                       ; Rule 8 - If Load is large AND Temperature is cold        ? Duration: Long      (large loads in cold water clean slowly)
[  18]        :                                       ; Rule 9 - If Load is small AND Fabric is delicate         ? Spin Speed: Low     (fragile, light load)
[  19]        :                                       
[  20]        :                                       ;Sample combinations for dynamic outputs:
[  21]        :                                       ;   Duration:
[  22]        :                                       ;       l = 3, f = 2, d = 1, t = 1   , fired rules: 7, 8, duration: 3150 sec or  52.5 min
[  23]        :                                       ;       l = 2, f = 2, d = 3, t = 2   , fired rules: 1, 5, duration: 3810 sec or  63.5 min
[  24]        :                                       
[  25]        :                                       .MODEL SMALL
[  26]        :                                       .STACK 100H
[  27]        :                                       
[  28]        :                                       .DATA
[  29]        :                                       ; Input states (0=not pressed, 1=pressed)
[  30]    0100: 00                                    temp_state      DB 0    ; 1=cold 20 C, 2=warm 40 C , 3=hot 60 C
[  31]    0101: 00                                    load_state      DB 0    ; 1=small, 2=medium, 3=large
[  32]    0102: 00                                    fabric_state    DB 0    ; 1=delicate, 2=normal, 3=tough
[  33]    0103: 00                                    dirt_state      DB 0    ; 1=light, 2=medium, 3=heavy
[  34]        :                                       
[  35]        :                                       ; Control buttons
[  36]    0104: 00                                    start_pressed   DB 0
[  37]    0105: 00                                    stop_pressed    DB 0
[  38]    0106: 00                                    system_running  DB 0
[  39]        :                                       
[  40]        :                                       ; Output values
[  41]    0107: 00 00                                 spin_speed_val  DW 0   ; Final spin speed (400-1200)
[  42]    0109: 00 00                                 duration_val    DW 0    ; Final duration in seconds (e.g 4500)
[  43]        :                                       
[  44]        :                                       ; sec val
[  45]    010B: 00                                    duration_sec    DB 0
[  46]    010C: 00                                    duration_min    DB 0
[  47]    010D: 00                                    duration_hr    DB 0
[  48]        :                                       
[  49]        :                                       ; Fuzzy rule results (strength of each rule 0-100)
[  50]    010E: 00 00 00 00 00 00 00 00 00 00         rule_strength   DB 10 DUP(0)
[  51]        :                                       
[  52]        :                                       ; INPUT Port Addresses
[  53]        :                                       
[  54]        :                                       TEMP_PORT       EQU 30H
[  55]        :                                       FABRIC_PORT     EQU 30H
[  56]        :                                       
[  57]        :                                       LOAD_PORT       EQU 32H
[  58]        :                                       DIRT_PORT       EQU 32H
[  59]        :                                       
[  60]        :                                       CONTROL_PORT    EQU 30H
[  61]        :                                       
[  62]        :                                       MACHINE_TEMP_PORT EQU 34H
[  63]        :                                       
[  64]        :                                       ; ===== INPUT Control Ports =====
[  65]        :                                       PORT_CON2 EQU 36H
[  66]        :                                       
[  67]        :                                       ;====LCD Ports========
[  68]        :                                       PORT_C1 EQU 24H
[  69]        :                                       PORT_B1 EQU 22H
[  70]        :                                       PORT_CONTROL EQU 26H
[  71]        :                                       PORT_A1 EQU 20H
[  72]        :                                       
[  73]        :                                       ;====LCD PORTS VALUE====
[  74]    0118: 00                                    PORTA_VAL DB 0
[  75]    0119: 00                                    PORTB_VAL DB 0
[  76]    011A: 00                                    PORTC_VAL DB 0
[  77]    011B: 48 45 4C 4C 4F 20 57 4F 52 4C 44 24   MYSTR	DB	"HELLO WORLD$"
                                                    
[  78]    0127: 24 24 24 24 24 24                     NUM_BUF DB 6 DUP('$')
[  79]    012D: 53 53 50 49 4E 3A 24 00               SPIN_STR DB 'SSPIN:$',0
[  80]    0135: 20 52 50 4D 24 00                     RPM_STR DB ' RPM$', 0
[  81]    013B: 54 69 6D 65 3A 24 00                  TIME_STR    DB 'Time:$',0
[  82]    0142: 20 53 24 00                           S_STR    DB ' S$',0
[  83]        :                                       
[  84]        :                                       ; Numerator and Denominator of spin_speed(why word? because each are equalled to AX or CX)
[  85]    0146: 00 00                                 spin_numerator DW 0;
[  86]    0148: 00 00                                 spin_denominator DW 0;
[  87]        :                                       
[  88]        :                                       ; Numerator and Denominator of time
[  89]    014A: 00 00                                 time_numerator DW 0;
[  90]    014C: 00 00                                 time_denominator DW 0;
[  91]        :                                       
[  92]        :                                       
[  93]        :                                       ;===================== TIMER MEMORY =====================
[  94]        :                                       
[  95]        :                                       ; ===== OUTPUT Control Ports =====
[  96]        :                                       PORT_CON1 EQU 26H
[  97]        :                                       PORT_CON3 EQU 46H
[  98]        :                                       PORT_CON4 EQU 56H
[  99]        :                                       
[ 100]        :                                       ; === PPI 3:  ===
[ 101]        :                                       PORTA3 EQU 40H
[ 102]        :                                       PORTB3 EQU 42H
[ 103]        :                                       PORTC3 EQU 44H
[ 104]        :                                       
[ 105]        :                                       
[ 106]        :                                       ; === PPI 4:  ===
[ 107]        :                                       PORTA4 EQU 50H
[ 108]        :                                       PORTB4 EQU 52H
[ 109]        :                                       PORTC4 EQU 54H
[ 110]        :                                       
[ 111]    014E: 3F 06 5B 4F 66 6D 7D 07 7F 6F         SEG_TABLE   DB 3FH, 06H, 5BH, 4FH, 66H, 6DH, 7DH, 07H, 7FH, 6FH
[ 112]        :                                       
[ 113]        :                                       ;===================== LED AND BUZZER MEMORY =====================
[ 114]        :                                       ; LED_BLUE (PA0) = It blinks after start until end
[ 115]        :                                       ; LED_RED (PA1) = before starting and when getting inputs, this one is on
[ 116]        :                                       ; BUZZER (PA2) = buzzer is enabled after timeout.
[ 117]        :                                       
[ 118]        :                                       LED_BUZZER_PORT EQU 20H ; LED_RED = before starting and when getting inputs, this one is on
[ 119]        :                                       
[ 120]        :                                       ;===================== TEMP CONTROL =====================
[ 121]    0158: 00                                    temp_sec_alert DB 0 ; consistent time after temp_alerted stayed 1  (after 5 seconds, we would halt)
[ 122]    0159: 00                                    temp_alerted DB 0 ; 1 if a temp alert happened 0 if not
[ 123]        :                                       
[ 124]        :                                       .CODE
[ 125]    0160:                                       MAIN PROC
[ 126]    0160: B8 10 00                              MOV AX, @DATA
[ 127]    0163: 8E D8                                 MOV DS, AX
[ 128]        :                                       
[ 129]    0165: E8 2F 00                              CALL INIT_SYSTEM
[ 130]        :                                       
[ 131]    0168:                                       MAIN_LOOP:
[ 132]        :                                       ; Turning on RED LED
[ 133]    0168: E8 78 00                              CALL LED_RED_ON
[ 134]        :                                       
[ 135]    016B: E8 AE 00                              CALL READ_INPUTS
[ 136]    016E: E8 AC 01                              CALL CHECK_START_BUTTON
[ 137]        :                                       
[ 138]    0171: 80 3E 06 00 01                        CMP system_running, 1
[ 139]        :                                       
[ 140]    0176: 74 02                                 JE PROCESS_FUZZY
[ 141]    0178: EB EE                                 JMP MAIN_LOOP
[ 142]        :                                       
[ 143]    017A:                                       PROCESS_FUZZY:
[ 144]        :                                       ; Turning off red led
[ 145]    017A: E8 6D 00                              CALL LED_RED_OFF
[ 146]        :                                       
[ 147]        :                                       ; Turning on blue led until timeout
[ 148]    017D: E8 71 00                              CALL LED_BLUE_ON
[ 149]        :                                       
[ 150]    0180: E8 B1 01                              CALL FUZZY_INFERENCE
[ 151]        :                                       
[ 152]    0183: E8 40 04                              CALL SEND_OUTPUTS
[ 153]        :                                       
[ 154]    0186:                                       STOP_SYSTEM:
[ 155]    0186: E8 C7 06                              CALL RESET_OUTPUTS
[ 156]        :                                       
[ 157]    0189: E8 6C 00                              CALL LED_BLUE_OFF
[ 158]    018C: E8 70 00                              CALL BUZZER_ON
[ 159]    018F: E8 AA 06                              CALL DELAY_1SEC
[ 160]        :                                       ; Turning off the buzzer when system restarting
[ 161]    0192: E8 71 00                              CALL BUZZER_OFF
[ 162]        :                                       
[ 163]    0195: EB D1                                 JMP MAIN_LOOP
[ 164]        :                                       MAIN ENDP
[ 165]        :                                       
[ 166]        :                                       
[ 167]        :                                       ; Initialize system
[ 168]    0197:                                       INIT_SYSTEM PROC
[ 169]        :                                       ; Clear all states
[ 170]    0197: C6 06 00 00 00                        MOV temp_state, 0
[ 171]    019C: C6 06 01 00 00                        MOV load_state, 0
[ 172]    01A1: C6 06 02 00 00                        MOV fabric_state, 0
[ 173]    01A6: C6 06 03 00 00                        MOV dirt_state, 0
[ 174]        :                                       
[ 175]    01AB: C7 06 07 00 00 00                     MOV spin_speed_val, 0
[ 176]    01B1: C7 06 09 00 00 00                     MOV duration_val, 0
[ 177]    01B7: C6 06 0D 00 00                        MOV duration_hr, 0
[ 178]    01BC: C6 06 0C 00 00                        MOV duration_min, 0
[ 179]    01C1: C6 06 0B 00 00                        MOV duration_sec, 0
[ 180]        :                                       
[ 181]    01C6: C6 06 04 00 00                        MOV start_pressed, 0
[ 182]    01CB: C6 06 05 00 00                        MOV stop_pressed, 0
[ 183]    01D0: C6 06 06 00 00                        MOV system_running, 0
[ 184]        :                                       
[ 185]    01D5: C6 06 59 00 00                        MOV temp_alerted, 0
[ 186]    01DA: C6 06 58 00 00                        MOV temp_sec_alert, 0
[ 187]        :                                       
[ 188]        :                                       ; Initialize PPI control registers
[ 189]    01DF: E8 2B 00                              CALL INIT_PPI
[ 190]        :                                       
[ 191]        :                                       
[ 192]    01E2: C3                                    RET
[ 193]        :                                       INIT_SYSTEM ENDP
[ 194]        :                                       
[ 195]    01E3:                                       LED_RED_ON PROC
[ 196]    01E3: 50                                    PUSH AX
[ 197]        :                                       
[ 198]    01E4: B0 02                                 MOV AL, 02H
[ 199]    01E6: E6 20                                 OUT LED_BUZZER_PORT, AL
[ 200]        :                                       
[ 201]    01E8: 58                                    POP AX
[ 202]    01E9: C3                                    RET
[ 203]        :                                       LED_RED_ON ENDP
[ 204]        :                                       
[ 205]    01EA:                                       LED_RED_OFF PROC
[ 206]    01EA: 50                                    PUSH AX
[ 207]        :                                       
[ 208]    01EB: B0 00                                 MOV AL, 00H
[ 209]    01ED: E6 20                                 OUT LED_BUZZER_PORT, AL
[ 210]        :                                       
[ 211]    01EF: 58                                    POP AX
[ 212]    01F0: C3                                    RET
[ 213]        :                                       LED_RED_OFF ENDP
[ 214]        :                                       
[ 215]    01F1:                                       LED_BLUE_ON PROC
[ 216]    01F1: 50                                    PUSH AX
[ 217]        :                                       
[ 218]    01F2: B0 01                                 MOV AL, 01H
[ 219]    01F4: E6 20                                 OUT LED_BUZZER_PORT, AL
[ 220]        :                                       
[ 221]    01F6: 58                                    POP AX
[ 222]    01F7: C3                                    RET
[ 223]        :                                       LED_BLUE_ON ENDP
[ 224]        :                                       
[ 225]    01F8:                                       LED_BLUE_OFF PROC
[ 226]    01F8: 50                                    PUSH AX
[ 227]        :                                       
[ 228]    01F9: B0 00                                 MOV AL, 00H
[ 229]    01FB: E6 20                                 OUT LED_BUZZER_PORT, AL
[ 230]        :                                       
[ 231]    01FD: 58                                    POP AX
[ 232]    01FE: C3                                    RET
[ 233]        :                                       LED_BLUE_OFF ENDP
[ 234]        :                                       
[ 235]    01FF:                                       BUZZER_ON PROC
[ 236]    01FF: 50                                    PUSH AX
[ 237]        :                                       
[ 238]    0200: B0 04                                 MOV AL, 04H
[ 239]    0202: E6 20                                 OUT LED_BUZZER_PORT, AL
[ 240]        :                                       
[ 241]    0204: 58                                    POP AX
[ 242]    0205: C3                                    RET
[ 243]        :                                       BUZZER_ON ENDP
[ 244]        :                                       
[ 245]    0206:                                       BUZZER_OFF PROC
[ 246]    0206: 50                                    PUSH AX
[ 247]        :                                       
[ 248]    0207: B0 00                                 MOV AL, 00H
[ 249]    0209: E6 20                                 OUT LED_BUZZER_PORT, AL
[ 250]        :                                       
[ 251]    020B: 58                                    POP AX
[ 252]    020C: C3                                    RET
[ 253]        :                                       BUZZER_OFF ENDP
[ 254]        :                                       
[ 255]    020D:                                       INIT_PPI PROC
[ 256]    020D: 50                                    PUSH AX
[ 257]        :                                       
[ 258]    020E: B0 92                                 MOV AL, 92H
[ 259]    0210: E6 36                                 OUT PORT_CON2, AL
[ 260]        :                                       
[ 261]    0212: B0 80                                 MOV AL, 80H
[ 262]    0214: E6 26                                 OUT PORT_CON1, AL
[ 263]    0216: E6 46                                 OUT PORT_CON3, AL
[ 264]    0218: E6 56                                 OUT PORT_CON4, AL
[ 265]        :                                       
[ 266]    021A: 58                                    POP AX
[ 267]    021B: C3                                    RET
[ 268]        :                                       INIT_PPI ENDP
[ 269]        :                                       
[ 270]    021C:                                       READ_INPUTS PROC
[ 271]        :                                       
[ 272]    021C: 50                                    PUSH AX
[ 273]    021D: 52                                    PUSH DX
[ 274]        :                                       
[ 275]    021E:                                       TEMP:
[ 276]        :                                       ; Read temperature buttons
[ 277]    021E: BA 30 00                              MOV DX, TEMP_PORT
[ 278]    0221: EC                                    IN AL, DX
[ 279]        :                                       
[ 280]    0222: A8 01                                 TEST AL, 01H
[ 281]    0224: 74 0A                                 JZ SET_TEMP1
[ 282]        :                                       
[ 283]    0226: A8 02                                 TEST AL, 02H
[ 284]    0228: 74 15                                 JZ SET_TEMP2
[ 285]        :                                       
[ 286]    022A: A8 04                                 TEST AL, 04H
[ 287]    022C: 74 20                                 JZ SET_TEMP3
[ 288]        :                                       
[ 289]    022E: EB EE                                 JMP TEMP
[ 290]        :                                       
[ 291]    0230:                                       SET_TEMP1:
[ 292]    0230: E8 60 06                              CALL DELAY20
[ 293]    0233: EC                                    IN AL, DX
[ 294]    0234: A8 01                                 TEST AL, 01H
[ 295]    0236: 75 E6                                 JNZ TEMP
[ 296]    0238: C6 06 00 00 01                        MOV temp_state, 1
[ 297]    023D: EB 1E                                 JMP LOAD
[ 298]        :                                       
[ 299]    023F:                                       SET_TEMP2:
[ 300]    023F: E8 51 06                              CALL DELAY20
[ 301]    0242: EC                                    IN AL, DX
[ 302]    0243: A8 02                                 TEST AL, 02H
[ 303]    0245: 75 D7                                 JNZ TEMP
[ 304]    0247: C6 06 00 00 02                        MOV temp_state, 2
[ 305]    024C: EB 0F                                 JMP LOAD
[ 306]        :                                       
[ 307]    024E:                                       SET_TEMP3:
[ 308]    024E: E8 42 06                              CALL DELAY20
[ 309]    0251: EC                                    IN AL, DX
[ 310]    0252: A8 04                                 TEST AL, 04H
[ 311]    0254: 75 C8                                 JNZ TEMP
[ 312]    0256: C6 06 00 00 03                        MOV temp_state, 3
[ 313]    025B: EB 00                                 JMP LOAD
[ 314]        :                                       
[ 315]        :                                       
[ 316]    025D:                                       LOAD:
[ 317]        :                                       ; Read load buttons
[ 318]    025D: BA 32 00                              MOV DX, LOAD_PORT
[ 319]    0260: EC                                    IN AL, DX
[ 320]        :                                       
[ 321]    0261: A8 01                                 TEST AL, 01H
[ 322]    0263: 74 0A                                 JZ SET_LOAD1
[ 323]        :                                       
[ 324]    0265: A8 02                                 TEST AL, 02H
[ 325]    0267: 74 15                                 JZ SET_LOAD2
[ 326]        :                                       
[ 327]    0269: A8 04                                 TEST AL, 04H
[ 328]    026B: 74 20                                 JZ SET_LOAD3
[ 329]        :                                       
[ 330]    026D: EB EE                                 JMP LOAD
[ 331]        :                                       
[ 332]    026F:                                       SET_LOAD1:
[ 333]    026F: E8 21 06                              CALL DELAY20
[ 334]    0272: EC                                    IN AL, DX
[ 335]    0273: A8 01                                 TEST AL, 01H
[ 336]    0275: 75 E6                                 JNZ LOAD
[ 337]    0277: C6 06 01 00 01                        MOV load_state, 1
[ 338]    027C: EB 1E                                 JMP FABRIC
[ 339]        :                                       
[ 340]    027E:                                       SET_LOAD2:
[ 341]    027E: E8 12 06                              CALL DELAY20
[ 342]    0281: EC                                    IN AL, DX
[ 343]    0282: A8 02                                 TEST AL, 02H
[ 344]    0284: 75 D7                                 JNZ LOAD
[ 345]    0286: C6 06 01 00 02                        MOV load_state, 2
[ 346]    028B: EB 0F                                 JMP FABRIC
[ 347]        :                                       
[ 348]    028D:                                       SET_LOAD3:
[ 349]    028D: E8 03 06                              CALL DELAY20
[ 350]    0290: EC                                    IN AL, DX
[ 351]    0291: A8 04                                 TEST AL, 04H
[ 352]    0293: 75 C8                                 JNZ LOAD
[ 353]    0295: C6 06 01 00 03                        MOV load_state, 3
[ 354]    029A: EB 00                                 JMP FABRIC
[ 355]        :                                       
[ 356]        :                                       
[ 357]        :                                       
[ 358]    029C:                                       FABRIC:
[ 359]        :                                       ; Read fabric buttons
[ 360]    029C: BA 30 00                              MOV DX, FABRIC_PORT
[ 361]    029F: EC                                    IN AL, DX
[ 362]        :                                       
[ 363]    02A0: A8 08                                 TEST AL, 08H
[ 364]    02A2: 74 0A                                 JZ SET_FABRIC1
[ 365]        :                                       
[ 366]    02A4: A8 10                                 TEST AL, 10H
[ 367]    02A6: 74 15                                 JZ SET_FABRIC2
[ 368]        :                                       
[ 369]    02A8: A8 20                                 TEST AL, 20H
[ 370]    02AA: 74 20                                 JZ SET_FABRIC3
[ 371]    02AC: EB EE                                 JMP FABRIC
[ 372]        :                                       
[ 373]    02AE:                                       SET_FABRIC1:
[ 374]    02AE: E8 E2 05                              CALL DELAY20
[ 375]    02B1: EC                                    IN AL, DX
[ 376]    02B2: A8 08                                 TEST AL, 08H
[ 377]    02B4: 75 E6                                 JNZ FABRIC
[ 378]    02B6: C6 06 02 00 01                        MOV fabric_state, 1
[ 379]    02BB: EB 1E                                 JMP DIRT
[ 380]        :                                       
[ 381]    02BD:                                       SET_FABRIC2:
[ 382]    02BD: E8 D3 05                              CALL DELAY20
[ 383]    02C0: EC                                    IN AL, DX
[ 384]    02C1: A8 10                                 TEST AL, 10H
[ 385]    02C3: 75 D7                                 JNZ FABRIC
[ 386]    02C5: C6 06 02 00 02                        MOV fabric_state, 2
[ 387]    02CA: EB 0F                                 JMP DIRT
[ 388]        :                                       
[ 389]    02CC:                                       SET_FABRIC3:
[ 390]    02CC: E8 C4 05                              CALL DELAY20
[ 391]    02CF: EC                                    IN AL, DX
[ 392]    02D0: A8 20                                 TEST AL, 20H
[ 393]    02D2: 75 C8                                 JNZ FABRIC
[ 394]    02D4: C6 06 02 00 03                        MOV fabric_state, 3
[ 395]    02D9: EB 00                                 JMP DIRT
[ 396]        :                                       
[ 397]    02DB:                                       DIRT:
[ 398]        :                                       ; Read dirtiness buttons
[ 399]    02DB: BA 32 00                              MOV DX, DIRT_PORT
[ 400]    02DE: EC                                    IN AL, DX
[ 401]        :                                       
[ 402]    02DF: A8 08                                 TEST AL, 08H
[ 403]    02E1: 74 0A                                 JZ SET_DIRT1
[ 404]        :                                       
[ 405]    02E3: A8 10                                 TEST AL, 10H
[ 406]    02E5: 74 15                                 JZ SET_DIRT2
[ 407]        :                                       
[ 408]    02E7: A8 20                                 TEST AL, 20H
[ 409]    02E9: 74 20                                 JZ SET_DIRT3
[ 410]        :                                       
[ 411]    02EB: EB EE                                 JMP DIRT
[ 412]        :                                       
[ 413]    02ED:                                       SET_DIRT1:
[ 414]    02ED: E8 A3 05                              CALL DELAY20
[ 415]    02F0: EC                                    IN AL, DX
[ 416]    02F1: A8 08                                 TEST AL, 08H
[ 417]    02F3: 75 E6                                 JNZ DIRT
[ 418]    02F5: C6 06 03 00 01                        MOV dirt_state, 1
[ 419]    02FA: EB 1E                                 JMP TEND
[ 420]        :                                       
[ 421]    02FC:                                       SET_DIRT2:
[ 422]    02FC: E8 94 05                              CALL DELAY20
[ 423]    02FF: EC                                    IN AL, DX
[ 424]    0300: A8 10                                 TEST AL, 10H
[ 425]    0302: 75 D7                                 JNZ DIRT
[ 426]    0304: C6 06 03 00 02                        MOV dirt_state, 2
[ 427]    0309: EB 0F                                 JMP TEND
[ 428]        :                                       
[ 429]    030B:                                       SET_DIRT3:
[ 430]    030B: E8 85 05                              CALL DELAY20
[ 431]    030E: EC                                    IN AL, DX
[ 432]    030F: A8 20                                 TEST AL, 20H
[ 433]    0311: 75 C8                                 JNZ DIRT
[ 434]    0313: C6 06 03 00 03                        MOV dirt_state, 3
[ 435]    0318: EB 00                                 JMP TEND
[ 436]        :                                       
[ 437]    031A:                                       TEND:
[ 438]    031A: 5A                                    POP DX
[ 439]    031B: 58                                    POP AX
[ 440]    031C: C3                                    RET
[ 441]        :                                       
[ 442]        :                                       READ_INPUTS ENDP
[ 443]        :                                       
[ 444]        :                                       ; Check start button
[ 445]    031D:                                       CHECK_START_BUTTON PROC
[ 446]    031D: 50                                    PUSH AX
[ 447]    031E: 52                                    PUSH DX
[ 448]        :                                       
[ 449]    031F: BA 30 00                              MOV DX, CONTROL_PORT
[ 450]    0322: EC                                    IN AL, DX
[ 451]        :                                       
[ 452]        :                                       ; Check start button (bit 6)
[ 453]    0323: A8 40                                 TEST AL, 40H
[ 454]    0325: 75 0A                                 JNZ CONTROL_END
[ 455]    0327: C6 06 04 00 01                        MOV start_pressed, 1
[ 456]    032C: C6 06 06 00 01                        MOV system_running, 1
[ 457]        :                                       
[ 458]    0331:                                       CONTROL_END:
[ 459]    0331: 5A                                    POP DX
[ 460]    0332: 58                                    POP AX
[ 461]    0333: C3                                    RET
[ 462]        :                                       CHECK_START_BUTTON ENDP
[ 463]        :                                       
[ 464]        :                                       ; Main fuzzy inference engine
[ 465]    0334:                                       FUZZY_INFERENCE PROC
[ 466]    0334: 50                                    PUSH AX
[ 467]    0335: 53                                    PUSH BX
[ 468]    0336: 51                                    PUSH CX
[ 469]        :                                       
[ 470]        :                                       ; Clear previous rule strengths
[ 471]    0337: B9 0A 00                              MOV CX, 10
[ 472]    033A: BB 0E 00                              MOV BX, OFFSET rule_strength
[ 473]    033D:                                       CLEAR_RULES:
[ 474]    033D: C6 07 00                              MOV BYTE PTR [BX], 0
[ 475]    0340: 43                                    INC BX
[ 476]    0341: E2 FA                                 LOOP CLEAR_RULES
[ 477]        :                                       
[ 478]        :                                       ; Evaluate each rule
[ 479]    0343: E8 25 00                              CALL EVAL_RULE_0    ; Small load + light dirt
[ 480]    0346: E8 36 00                              CALL EVAL_RULE_1    ; Medium load + medium dirt
[ 481]    0349: E8 47 00                              CALL EVAL_RULE_2    ; Large load + heavy dirt
[ 482]    034C: E8 58 00                              CALL EVAL_RULE_3    ; Delicate fabric
[ 483]    034F: E8 69 00                              CALL EVAL_RULE_4    ; Tough fabric + heavy dirt
[ 484]    0352: E8 7A 00                              CALL EVAL_RULE_5    ; Hot temp + tough fabric
[ 485]    0355: E8 8B 00                              CALL EVAL_RULE_6    ; Cold temp + heavy dirt
[ 486]    0358: E8 9C 00                              CALL EVAL_RULE_7    ; Large load + delicate fabric
[ 487]    035B: E8 AD 00                              CALL EVAL_RULE_8    ; Light dirt + normal fabric
[ 488]    035E: E8 BE 00                              CALL EVAL_RULE_9   ; Small load + medium dirt
[ 489]        :                                       
[ 490]        :                                       ; Calculate final outputs using weighted average
[ 491]    0361: E8 CF 00                              CALL CALCULATE_SPIN_SPEED
[ 492]    0364: E8 58 01                              CALL CALCULATE_DURATION
[ 493]        :                                       
[ 494]    0367: 59                                    POP CX
[ 495]    0368: 5B                                    POP BX
[ 496]    0369: 58                                    POP AX
[ 497]    036A: C3                                    RET
[ 498]        :                                       FUZZY_INFERENCE ENDP
[ 499]        :                                       
[ 500]        :                                       ;=================== Evaluating Rules ===================
[ 501]        :                                       
[ 502]        :                                       ; Rule 0: Load = small AND Dirt = light ? Spin = Low, Duration = Short
[ 503]    036B:                                       EVAL_RULE_0 PROC
[ 504]    036B: 80 3E 01 00 01                        CMP load_state, 1
[ 505]    0370: 75 0C                                 JNE RULE0_END
[ 506]    0372: 80 3E 03 00 01                        CMP dirt_state, 1
[ 507]    0377: 75 05                                 JNE RULE0_END
[ 508]        :                                       
[ 509]    0379: C6 06 0E 00 01                        MOV rule_strength[0], 1
[ 510]    037E:                                       RULE0_END:
[ 511]    037E: C3                                    RET
[ 512]        :                                       EVAL_RULE_0 ENDP
[ 513]        :                                       
[ 514]        :                                       ; Rule 1: Load = medium AND Fabric = normal ? Spin = Medium, Duration = Medium
[ 515]    037F:                                       EVAL_RULE_1 PROC
[ 516]    037F: 80 3E 01 00 02                        CMP load_state, 2
[ 517]    0384: 75 0C                                 JNE RULE1_END
[ 518]    0386: 80 3E 02 00 02                        CMP fabric_state, 2
[ 519]    038B: 75 05                                 JNE RULE1_END
[ 520]        :                                       
[ 521]    038D: C6 06 0F 00 01                        MOV rule_strength[1], 1
[ 522]    0392:                                       RULE1_END:
[ 523]    0392: C3                                    RET
[ 524]        :                                       EVAL_RULE_1 ENDP
[ 525]        :                                       
[ 526]        :                                       ; Rule 2: Load = large AND Fabric = tough ? Spin = High, Duration = Long
[ 527]    0393:                                       EVAL_RULE_2 PROC
[ 528]    0393: 80 3E 01 00 03                        CMP load_state, 3
[ 529]    0398: 75 0C                                 JNE RULE2_END
[ 530]    039A: 80 3E 02 00 03                        CMP fabric_state, 3
[ 531]    039F: 75 05                                 JNE RULE2_END
[ 532]        :                                       
[ 533]    03A1: C6 06 10 00 01                        MOV rule_strength[2], 1
[ 534]    03A6:                                       RULE2_END:
[ 535]    03A6: C3                                    RET
[ 536]        :                                       EVAL_RULE_2 ENDP
[ 537]        :                                       
[ 538]        :                                       ; Rule 3: Fabric = delicate AND Temp = cold ? Spin = Low
[ 539]    03A7:                                       EVAL_RULE_3 PROC
[ 540]    03A7: 80 3E 02 00 01                        CMP fabric_state, 1
[ 541]    03AC: 75 0C                                 JNE RULE3_END
[ 542]    03AE: 80 3E 00 00 01                        CMP temp_state, 1
[ 543]    03B3: 75 05                                 JNE RULE3_END
[ 544]        :                                       
[ 545]    03B5: C6 06 11 00 01                        MOV rule_strength[3], 1
[ 546]    03BA:                                       RULE3_END:
[ 547]    03BA: C3                                    RET
[ 548]        :                                       EVAL_RULE_3 ENDP
[ 549]        :                                       
[ 550]        :                                       ; Rule 4: Fabric = tough AND Temp = hot ? Spin = High
[ 551]    03BB:                                       EVAL_RULE_4 PROC
[ 552]    03BB: 80 3E 02 00 03                        CMP fabric_state, 3
[ 553]    03C0: 75 0C                                 JNE RULE4_END
[ 554]    03C2: 80 3E 00 00 03                        CMP temp_state, 3
[ 555]    03C7: 75 05                                 JNE RULE4_END
[ 556]        :                                       
[ 557]    03C9: C6 06 12 00 01                        MOV rule_strength[4], 1
[ 558]    03CE:                                       RULE4_END:
[ 559]    03CE: C3                                    RET
[ 560]        :                                       EVAL_RULE_4 ENDP
[ 561]        :                                       
[ 562]        :                                       ; Rule 5: Dirt = heavy AND Temp = warm ? Duration = Long
[ 563]    03CF:                                       EVAL_RULE_5 PROC
[ 564]    03CF: 80 3E 03 00 03                        CMP dirt_state, 3
[ 565]    03D4: 75 0C                                 JNE RULE5_END
[ 566]    03D6: 80 3E 00 00 02                        CMP temp_state, 2
[ 567]    03DB: 75 05                                 JNE RULE5_END
[ 568]        :                                       
[ 569]    03DD: C6 06 13 00 01                        MOV rule_strength[5], 1
[ 570]    03E2:                                       RULE5_END:
[ 571]    03E2: C3                                    RET
[ 572]        :                                       EVAL_RULE_5 ENDP
[ 573]        :                                       
[ 574]        :                                       ; Rule 6: Dirt = medium AND Load = medium ? Duration = Medium
[ 575]    03E3:                                       EVAL_RULE_6 PROC
[ 576]    03E3: 80 3E 03 00 02                        CMP dirt_state, 2
[ 577]    03E8: 75 0C                                 JNE RULE6_END
[ 578]    03EA: 80 3E 01 00 02                        CMP load_state, 2
[ 579]    03EF: 75 05                                 JNE RULE6_END
[ 580]        :                                       
[ 581]    03F1: C6 06 14 00 01                        MOV rule_strength[6], 1
[ 582]    03F6:                                       RULE6_END:
[ 583]    03F6: C3                                    RET
[ 584]        :                                       EVAL_RULE_6 ENDP
[ 585]        :                                       
[ 586]        :                                       ; Rule 7: Dirt = light AND Fabric = normal ? Duration = Short
[ 587]    03F7:                                       EVAL_RULE_7 PROC
[ 588]    03F7: 80 3E 03 00 01                        CMP dirt_state, 1
[ 589]    03FC: 75 0C                                 JNE RULE7_END
[ 590]    03FE: 80 3E 02 00 02                        CMP fabric_state, 2
[ 591]    0403: 75 05                                 JNE RULE7_END
[ 592]        :                                       
[ 593]    0405: C6 06 15 00 01                        MOV rule_strength[7], 1
[ 594]    040A:                                       RULE7_END:
[ 595]    040A: C3                                    RET
[ 596]        :                                       EVAL_RULE_7 ENDP
[ 597]        :                                       
[ 598]        :                                       ; Rule 8: Load = large AND Temp = cold ? Duration = Long
[ 599]    040B:                                       EVAL_RULE_8 PROC
[ 600]    040B: 80 3E 01 00 03                        CMP load_state, 3
[ 601]    0410: 75 0C                                 JNE RULE8_END
[ 602]    0412: 80 3E 00 00 01                        CMP temp_state, 1
[ 603]    0417: 75 05                                 JNE RULE8_END
[ 604]        :                                       
[ 605]    0419: C6 06 16 00 01                        MOV rule_strength[8], 1
[ 606]    041E:                                       RULE8_END:
[ 607]    041E: C3                                    RET
[ 608]        :                                       EVAL_RULE_8 ENDP
[ 609]        :                                       
[ 610]        :                                       ; Rule 9: Load = small AND Fabric = delicate ? Spin = Low
[ 611]    041F:                                       EVAL_RULE_9 PROC
[ 612]    041F: 80 3E 01 00 01                        CMP load_state, 1
[ 613]    0424: 75 0C                                 JNE RULE9_END
[ 614]    0426: 80 3E 02 00 01                        CMP fabric_state, 1
[ 615]    042B: 75 05                                 JNE RULE9_END
[ 616]        :                                       
[ 617]    042D: C6 06 17 00 01                        MOV rule_strength[9], 1
[ 618]    0432:                                       RULE9_END:
[ 619]    0432: C3                                    RET
[ 620]        :                                       EVAL_RULE_9 ENDP
[ 621]        :                                       
[ 622]    0433:                                       CALCULATE_SPIN_SPEED PROC
[ 623]    0433: 50                                    PUSH AX
[ 624]    0434: 53                                    PUSH BX
[ 625]    0435: 51                                    PUSH CX
[ 626]    0436: 56                                    PUSH SI
[ 627]        :                                       
[ 628]        :                                       ; Clear accumulators
[ 629]    0437: B8 00 00                              MOV AX, 0
[ 630]    043A: A3 46 00                              MOV spin_numerator, AX
[ 631]    043D: A3 48 00                              MOV spin_denominator, AX
[ 632]        :                                       
[ 633]        :                                       ; ----------------------------
[ 634]        :                                       ; Rule 1, 4, 8: Low speed (500 RPM)
[ 635]    0440: B1 00                                 MOV CL, 0
[ 636]    0442: 02 0E 0E 00                           ADD CL, rule_strength[0]
[ 637]    0446: 02 0E 11 00                           ADD CL, rule_strength[3]
[ 638]    044A: 02 0E 17 00                           ADD CL, rule_strength[9]
[ 639]        :                                       
[ 640]    044E: 80 F9 00                              CMP CL, 0
[ 641]    0451: 74 11                                 JE SKIP_LOW_SPEED
[ 642]        :                                       
[ 643]    0453: 8A C1                                 MOV AL, CL
[ 644]    0455: B4 00                                 MOV AH, 0
[ 645]        :                                       
[ 646]    0457: BE F4 01                              MOV SI, 500
[ 647]    045A: F7 E6                                 MUL SI              ; AX = AX(copied from 00CX)(16-bit) * SI(16-bit)(500)     (output is stored in DX:AX but because DX would be 0000 (3 * 500 = 1500(11-bit)), we won't need it)
[ 648]    045C: 01 06 46 00                           ADD spin_numerator, AX
[ 649]    0460: 01 0E 48 00                           ADD spin_denominator, CX
[ 650]        :                                       
[ 651]    0464:                                       SKIP_LOW_SPEED:
[ 652]        :                                       
[ 653]        :                                       ; ----------------------------
[ 654]        :                                       ; Rule 2, 10: Medium speed (800 RPM)
[ 655]    0464: B1 00                                 MOV CL, 0
[ 656]    0466: 02 0E 0F 00                           ADD CL, rule_strength[1]
[ 657]        :                                       
[ 658]    046A: 80 F9 00                              CMP CL, 0
[ 659]    046D: 74 11                                 JE SKIP_MED_SPEED
[ 660]        :                                       
[ 661]    046F: 8A C1                                 MOV AL, CL
[ 662]    0471: B4 00                                 MOV AH, 0
[ 663]        :                                       
[ 664]    0473: BE 20 03                              MOV SI, 800
[ 665]    0476: F7 E6                                 MUL SI
[ 666]    0478: 01 06 46 00                           ADD spin_numerator, AX
[ 667]    047C: 01 0E 48 00                           ADD spin_denominator, CX
[ 668]        :                                       
[ 669]    0480:                                       SKIP_MED_SPEED:
[ 670]        :                                       
[ 671]        :                                       ; ----------------------------
[ 672]        :                                       ; Rule 3, 6: High speed (1100 RPM)
[ 673]    0480: B1 00                                 MOV CL, 0
[ 674]    0482: 02 0E 10 00                           ADD CL, rule_strength[2]
[ 675]    0486: 02 0E 12 00                           ADD CL, rule_strength[4]
[ 676]        :                                       
[ 677]    048A: 80 F9 00                              CMP CL, 0
[ 678]    048D: 74 11                                 JE SKIP_HIGH_SPEED
[ 679]        :                                       
[ 680]    048F: 8A C1                                 MOV AL, CL
[ 681]    0491: B4 00                                 MOV AH, 0
[ 682]        :                                       
[ 683]    0493: BE 4C 04                              MOV SI, 1100
[ 684]    0496: F7 E6                                 MUL SI
[ 685]    0498: 01 06 46 00                           ADD spin_numerator, AX
[ 686]    049C: 01 0E 48 00                           ADD spin_denominator, CX
[ 687]        :                                       
[ 688]    04A0:                                       SKIP_HIGH_SPEED:
[ 689]        :                                       
[ 690]        :                                       ; ----------------------------
[ 691]        :                                       ; Final division
[ 692]    04A0: A1 48 00                              MOV AX, spin_denominator
[ 693]    04A3: 3D 00 00                              CMP AX, 0
[ 694]    04A6: 74 0C                                 JE DEFAULT_SPIN
[ 695]        :                                       
[ 696]    04A8: 8B D8                                 MOV BX, AX                ; BX = denominator
[ 697]    04AA: A1 46 00                              MOV AX, spin_numerator
[ 698]    04AD: F7 F3                                 DIV BX                 ; AX / BX ---> quotient = AX and remainder = DX
[ 699]    04AF: A3 07 00                              MOV spin_speed_val, AX
[ 700]    04B2: EB 06                                 JMP SPIN_END
[ 701]        :                                       
[ 702]    04B4:                                       DEFAULT_SPIN:
[ 703]    04B4: C7 06 07 00 20 03                     MOV spin_speed_val, 800   ; Default to medium if no rule fired
[ 704]        :                                       
[ 705]    04BA:                                       SPIN_END:
[ 706]    04BA: 5E                                    POP SI
[ 707]    04BB: 59                                    POP CX
[ 708]    04BC: 5B                                    POP BX
[ 709]    04BD: 58                                    POP AX
[ 710]    04BE: C3                                    RET
[ 711]        :                                       CALCULATE_SPIN_SPEED ENDP
[ 712]        :                                       
[ 713]        :                                       ; Calculate final duration using weighted average defuzzification
[ 714]    04BF:                                       CALCULATE_DURATION PROC
[ 715]    04BF: 50                                    PUSH AX
[ 716]    04C0: 53                                    PUSH BX
[ 717]    04C1: 51                                    PUSH CX
[ 718]    04C2: 56                                    PUSH SI
[ 719]        :                                       
[ 720]        :                                       ; JMP DEFAULT_DURATION ; DEBUG: for min count down, uncomment
[ 721]        :                                       ; Clear accumulators
[ 722]    04C3: B8 00 00                              MOV AX, 0
[ 723]    04C6: A3 4A 00                              MOV time_numerator, AX
[ 724]    04C9: A3 4C 00                              MOV time_denominator, AX
[ 725]        :                                       
[ 726]        :                                       ; Rule 1, 9: Short duration (30 minutes = 1800 seconds)
[ 727]    04CC: B1 00                                 MOV CL, 0
[ 728]    04CE: 02 0E 15 00                           ADD CL, rule_strength[7]
[ 729]    04D2: 02 0E 0E 00                           ADD CL, rule_strength[0]
[ 730]        :                                       
[ 731]    04D6: 80 F9 00                              CMP CL, 0
[ 732]    04D9: 74 11                                 JE SKIP_SHORT_DURATION
[ 733]        :                                       
[ 734]    04DB: 8A C1                                 MOV AL, CL
[ 735]    04DD: B4 00                                 MOV AH, 0
[ 736]        :                                       
[ 737]    04DF: BE 08 07                              MOV SI, 1800
[ 738]    04E2: F7 E6                                 MUL SI              ; AX = AX(copied from CX)(16-bit) * SI(16-bit)(1800 sec)     (output is stored in DX:AX but because DX would be 0000 (2 * 1800 = 3600(12-bit)), we won't need it)
[ 739]    04E4: 01 06 4A 00                           ADD time_numerator, AX
[ 740]    04E8: 01 0E 4C 00                           ADD time_denominator, CX
[ 741]        :                                       
[ 742]    04EC:                                       SKIP_SHORT_DURATION:
[ 743]        :                                       ; Rule 2: Medium duration (52 minutes = 3120 seconds)
[ 744]    04EC: B1 00                                 MOV CL, 0
[ 745]    04EE: 02 0E 14 00                           ADD CL, rule_strength[6]
[ 746]    04F2: 02 0E 0F 00                           ADD CL, rule_strength[1]
[ 747]        :                                       
[ 748]    04F6: 80 F9 00                              CMP CL, 0
[ 749]    04F9: 74 11                                 JE SKIP_MEDIUM_DURATION
[ 750]        :                                       
[ 751]    04FB: 8A C1                                 MOV AL, CL
[ 752]    04FD: B4 00                                 MOV AH, 0
[ 753]        :                                       
[ 754]    04FF: BE 30 0C                              MOV SI, 3120
[ 755]    0502: F7 E6                                 MUL SI              ; AX = AX(copied from CX)(16-bit) * SI(16-bit)(3120 sec)     (output is stored in DX:AX but because DX would be 0000 (1 * 3120 = 3120(12-bit)), we won't need it)
[ 756]    0504: 01 06 4A 00                           ADD time_numerator, AX
[ 757]    0508: 01 0E 4C 00                           ADD time_denominator, CX
[ 758]        :                                       
[ 759]    050C:                                       SKIP_MEDIUM_DURATION:
[ 760]        :                                       ; Rule 3, 5, 7: Long duration (75 minutes = 4500 seconds)
[ 761]    050C: B1 00                                 MOV CL, 0
[ 762]    050E: 8A 0E 10 00                           MOV CL, rule_strength[2]
[ 763]    0512: 8A 0E 13 00                           MOV CL, rule_strength[5]
[ 764]    0516: 02 0E 16 00                           ADD CL, rule_strength[8]
[ 765]        :                                       
[ 766]    051A: 80 F9 00                              CMP CL, 0
[ 767]    051D: 74 11                                 JE SKIP_LONG_DURATION
[ 768]        :                                       
[ 769]    051F: 8A C1                                 MOV AL, CL
[ 770]    0521: B4 00                                 MOV AH, 0
[ 771]        :                                       
[ 772]    0523: BE 94 11                              MOV SI, 4500
[ 773]    0526: F7 E6                                 MUL SI              ; AX = AX(copied from CX)(16-bit) * SI(16-bit)(4500 sec)     (output is stored in DX:AX but because DX would be 0000 (3 * 4500 = 13500(14-bit)), we won't need it)
[ 774]    0528: 01 06 4A 00                           ADD time_numerator, AX
[ 775]    052C: 01 0E 4C 00                           ADD time_denominator, CX
[ 776]        :                                       
[ 777]    0530:                                       SKIP_LONG_DURATION:
[ 778]        :                                       ; ----------------------------
[ 779]        :                                       ; Final division
[ 780]    0530: A1 4C 00                              MOV AX, time_denominator
[ 781]    0533: 3D 00 00                              CMP AX, 0
[ 782]    0536: 74 0C                                 JE DEFAULT_DURATION
[ 783]        :                                       
[ 784]    0538: 8B D8                                 MOV BX, AX                ; BX = denominator
[ 785]    053A: A1 4A 00                              MOV AX, time_numerator
[ 786]    053D: F7 F3                                 DIV BX                 ; AX / BX ---> quotient = AX and remainder = DX
[ 787]    053F: A3 09 00                              MOV duration_val, AX
[ 788]    0542: EB 06                                 JMP DURATION_END
[ 789]        :                                       
[ 790]    0544:                                       DEFAULT_DURATION:
[ 791]        :                                       ; MOV duration_val, 3120   ; Default to medium if no rule fired
[ 792]    0544: C7 06 09 00 10 0E                     MOV duration_val, 3600   ; DEBUG
[ 793]        :                                       
[ 794]        :                                       
[ 795]    054A:                                       DURATION_END:
[ 796]    054A: 5E                                    POP SI
[ 797]    054B: 59                                    POP CX
[ 798]    054C: 5B                                    POP BX
[ 799]    054D: 58                                    POP AX
[ 800]        :                                       
[ 801]    054E: E8 53 03                              CALL CONVERT_DURATION ; Converting the seconds into h, m, sec
[ 802]        :                                       
[ 803]    0551: C3                                    RET
[ 804]        :                                       CALCULATE_DURATION ENDP
[ 805]        :                                       
[ 806]        :                                       ;==================== TEMP AND STOP BUTTON CONTROL ====================
[ 807]        :                                       
[ 808]    0552:                                       CHECK_SYSTEM PROC
[ 809]    0552: 50                                    PUSH AX
[ 810]        :                                       
[ 811]    0553: 80 3E 06 00 01                        CMP system_running, 1
[ 812]    0558: 75 21                                 JNE SYSTEM_FINE
[ 813]        :                                       
[ 814]        :                                       ; Setting stop_pressed to 1 is for more than 10 sec temp_alerted was 1
[ 815]    055A: E8 37 00                              CALL CHECK_TEMP
[ 816]        :                                       
[ 817]        :                                       
[ 818]    055D: 80 3E 59 00 01                        CMP temp_alerted, 1
[ 819]    0562: 75 14                                 JNE STOP_BUTTON_CHECKING
[ 820]        :                                       
[ 821]        :                                       ; Increment time that we had consistent alert by 1
[ 822]    0564: A0 58 00                              MOV AL, temp_sec_alert
[ 823]    0567: FE C0                                 INC AL
[ 824]    0569: A2 58 00                              MOV temp_sec_alert, AL
[ 825]        :                                       
[ 826]        :                                       ; If it was consistent for more that 10 seconds, then system will stop and reset
[ 827]    056C: 80 3E 58 00 0A                        CMP temp_sec_alert, 10
[ 828]    0571: 72 05                                 JB STOP_BUTTON_CHECKING
[ 829]        :                                       
[ 830]    0573: C6 06 05 00 01                        MOV stop_pressed, 1
[ 831]        :                                       
[ 832]    0578:                                       STOP_BUTTON_CHECKING:
[ 833]    0578: E8 02 00                              CALL CHECK_STOP_BUTTON
[ 834]        :                                       
[ 835]    057B:                                       SYSTEM_FINE:
[ 836]        :                                       
[ 837]    057B: 58                                    POP AX
[ 838]    057C: C3                                    RET
[ 839]        :                                       CHECK_SYSTEM ENDP
[ 840]        :                                       
[ 841]    057D:                                       CHECK_STOP_BUTTON PROC
[ 842]    057D: 50                                    PUSH AX
[ 843]        :                                       
[ 844]    057E: E4 30                                 IN AL, CONTROL_PORT
[ 845]    0580: A8 80                                 TEST AL, 80H
[ 846]    0582: 75 0E                                 JNZ STOP_CONTROL_END
[ 847]    0584: E8 B5 02                              CALL DELAY_1SEC
[ 848]    0587: E4 30                                 IN AL, CONTROL_PORT
[ 849]    0589: A8 80                                 TEST AL, 80H
[ 850]    058B: 75 05                                 JNZ STOP_CONTROL_END
[ 851]        :                                       
[ 852]    058D: C6 06 05 00 01                        MOV stop_pressed, 1
[ 853]        :                                       
[ 854]    0592:                                       STOP_CONTROL_END:
[ 855]    0592: 58                                    POP AX
[ 856]    0593: C3                                    RET
[ 857]        :                                       CHECK_STOP_BUTTON ENDP
[ 858]        :                                       
[ 859]    0594:                                       CHECK_TEMP PROC
[ 860]    0594: 50                                    PUSH AX
[ 861]    0595: 52                                    PUSH DX
[ 862]    0596: E4 34                                 IN AL, MACHINE_TEMP_PORT
[ 863]    0598: 32 E4                                 XOR AH, AH
[ 864]        :                                       
[ 865]        :                                       
[ 866]    059A: 3C 24                                 CMP AL, 36
[ 867]    059C: 72 0A                                 JB TEMP_OK         ; If AL < 70, TEMP
[ 868]        :                                       
[ 869]        :                                       ; If AL >= 70
[ 870]    059E: C6 06 59 00 01                        MOV temp_alerted, 1
[ 871]    05A3: E8 12 00                              CALL TEMP_ALERT_ON
[ 872]        :                                       
[ 873]    05A6: EB 0D                                 JMP RESTORE_AX      ; Skip calling TEMP_ALERT_OFF
[ 874]        :                                       
[ 875]    05A8:                                       TEMP_OK:
[ 876]    05A8: E8 14 00                              CALL TEMP_ALERT_OFF
[ 877]    05AB: C6 06 59 00 00                        MOV temp_alerted, 0
[ 878]    05B0: C6 06 58 00 00                        MOV temp_sec_alert, 0
[ 879]        :                                       
[ 880]    05B5:                                       RESTORE_AX:
[ 881]    05B5: 5A                                    POP DX
[ 882]    05B6: 58                                    POP AX
[ 883]    05B7: C3                                    RET
[ 884]        :                                       CHECK_TEMP ENDP
[ 885]        :                                       
[ 886]    05B8:                                       TEMP_ALERT_ON PROC
[ 887]    05B8: 50                                    PUSH AX
[ 888]        :                                       
[ 889]    05B9: B0 09                                 MOV AL, 00001001b
[ 890]    05BB: E6 20                                 OUT LED_BUZZER_PORT, AL
[ 891]        :                                       
[ 892]    05BD: 58                                    POP AX
[ 893]    05BE: C3                                    RET
[ 894]        :                                       TEMP_ALERT_ON ENDP
[ 895]        :                                       
[ 896]    05BF:                                       TEMP_ALERT_OFF PROC
[ 897]    05BF: 50                                    PUSH AX
[ 898]        :                                       
[ 899]    05C0: B0 01                                 MOV AL, 00000001b
[ 900]    05C2: E6 20                                 OUT LED_BUZZER_PORT, AL
[ 901]        :                                       
[ 902]    05C4: 58                                    POP AX
[ 903]    05C5: C3                                    RET
[ 904]        :                                       TEMP_ALERT_OFF ENDP
[ 905]        :                                       
[ 906]        :                                       ;==================== TIMER AND LCD ====================
[ 907]        :                                       
[ 908]    05C6:                                       SEND_OUTPUTS PROC
[ 909]    05C6: E8 09 00                              CALL SEND_TO_LCD
[ 910]    05C9: E8 97 01                              CALL SEND_TO_TIMER
[ 911]    05CC: C6 06 05 00 01                        MOV stop_pressed, 1
[ 912]        :                                       
[ 913]    05D1: C3                                    RET
[ 914]        :                                       SEND_OUTPUTS ENDP
[ 915]        :                                       
[ 916]    05D2:                                       SEND_TO_LCD PROC
[ 917]        :                                       ;input: none
[ 918]        :                                       ;output: none
[ 919]    05D2: 50                                    	PUSH AX
[ 920]    05D3: 51                                    	PUSH CX
[ 921]    05D4: 52                                    	PUSH DX
[ 922]    05D5: 56                                    	PUSH SI
[ 923]        :                                       
[ 924]        :                                       	; set segment registers:
[ 925]    05D6: B8 10 00                              MOV AX, @DATA
[ 926]    05D9: 8E D8                                 MOV DS, AX
[ 927]    05DB: 8E C0                                 MOV ES, AX
[ 928]        :                                       
[ 929]        :                                       ; define IO ports
[ 930]    05DD: BA 26 00                              MOV DX, PORT_CONTROL
[ 931]    05E0: B0 80                                 MOV AL,10000000B   ; set all ports as output
[ 932]    05E2: EE                                    OUT DX, AL
[ 933]        :                                       
[ 934]    05E3: E8 42 00                              CALL LCD_INIT	
[ 935]        :                                       
[ 936]        :                                       	; ???????? ?? ??? 1 ???? 1
[ 937]    05E6: B2 01                                 MOV DL, 1
[ 938]    05E8: B6 01                                 MOV DH, 1
[ 939]    05EA: E8 2A 01                              CALL LCD_SET_CUR
[ 940]        :                                       
[ 941]        :                                       ; ??? ???? "SPIN:"
[ 942]    05ED: BE 2D 00                              LEA SI, SPIN_STR
[ 943]    05F0: E8 D7 00                              CALL LCD_PRINTSTR
[ 944]        :                                       
[ 945]    05F3: A1 07 00                              MOV AX, spin_speed_val
[ 946]    05F6: E8 E2 00                              CALL LCD_PRINT_NUM
[ 947]        :                                       
[ 948]    05F9: BE 35 00                              LEA SI, RPM_STR
[ 949]    05FC: E8 CB 00                              CALL LCD_PRINTSTR
[ 950]        :                                       
[ 951]        :                                       ; ???????? ?? ??? 2 ???? 1
[ 952]    05FF: B2 02                                 MOV DL, 2
[ 953]    0601: B6 01                                 MOV DH, 1
[ 954]    0603: E8 11 01                              CALL LCD_SET_CUR
[ 955]        :                                       
[ 956]    0606: BE 3B 00                              LEA SI, TIME_STR
[ 957]    0609: E8 BE 00                              CALL LCD_PRINTSTR
[ 958]        :                                       
[ 959]    060C: A1 09 00                              MOV AX, duration_val
[ 960]    060F: E8 C9 00                              CALL LCD_PRINT_NUM
[ 961]        :                                       
[ 962]    0612: BE 42 00                              LEA SI, S_STR
[ 963]    0615: E8 B2 00                              CALL LCD_PRINTSTR
[ 964]        :                                       
[ 965]    0618: B9 60 EA                              MOV CX, 60000
[ 966]    061B: E8 05 00                              CALL DELAY
[ 967]        :                                       
[ 968]    061E: 5E                                    	POP SI
[ 969]    061F: 5A                                    	POP DX
[ 970]    0620: 59                                    	POP CX
[ 971]    0621: 58                                    	POP AX
[ 972]        :                                       
[ 973]    0622: C3                                    	RET
[ 974]        :                                       SEND_TO_LCD ENDP
[ 975]        :                                       
[ 976]        :                                       
[ 977]        :                                       ;=======================================================
[ 978]        :                                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[ 979]        :                                       ;                                    ;
[ 980]        :                                       ;		LCD function library.        ;
[ 981]        :                                       ;                                    ;
[ 982]        :                                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[ 983]    0623:                                       DELAY PROC
[ 984]        :                                       ;input: CX, this value controls the delay. CX=50 means 1ms
[ 985]        :                                       ;output: none
[ 986]    0623: E3 02                                 	JCXZ @DELAY_END
[ 987]    0625:                                       	@DEL_LOOP:
[ 988]    0625: E2 FE                                 	LOOP @DEL_LOOP	
[ 989]    0627:                                       	@DELAY_END:
[ 990]    0627: C3                                    	RET
[ 991]        :                                       DELAY ENDP
[ 992]        :                                       
[ 993]        :                                       
[ 994]        :                                       ; LCD initialization
[ 995]    0628:                                       LCD_INIT PROC
[ 996]        :                                       
[ 997]        :                                       ;make RS=En=RW=0
[ 998]    0628: B0 00                                 	MOV AL,0
[ 999]    062A: E8 22 01                              	CALL OUT_B
[1000]        :                                       ;delay 20ms
[1001]    062D: B9 E8 03                              	MOV CX,1000
[1002]    0630: E8 F0 FF                              	CALL DELAY
[1003]        :                                       ;reset sequence
[1004]    0633: B4 30                                 	MOV AH,30H
[1005]    0635: E8 36 00                              	CALL LCD_CMD
[1006]    0638: B9 FA 00                              	MOV CX,250
[1007]    063B: E8 E5 FF                              	CALL DELAY
[1008]        :                                       	
[1009]    063E: B4 30                                 	MOV AH,30H
[1010]    0640: E8 2B 00                              	CALL LCD_CMD
[1011]    0643: B9 32 00                              	MOV CX,50
[1012]    0646: E8 DA FF                              	CALL DELAY
[1013]        :                                       	
[1014]    0649: B4 30                                 	MOV AH,30H
[1015]    064B: E8 20 00                              	CALL LCD_CMD
[1016]    064E: B9 F4 01                              	MOV CX,500
[1017]    0651: E8 CF FF                              	CALL DELAY
[1018]        :                                       	
[1019]        :                                       ;function set
[1020]    0654: B4 38                                 	MOV AH,38H
[1021]    0656: E8 15 00                              	CALL LCD_CMD
[1022]        :                                       	
[1023]    0659: B4 0C                                 	MOV AH,0CH
[1024]    065B: E8 10 00                              	CALL LCD_CMD
[1025]        :                                       	
[1026]    065E: B4 01                                 	MOV AH,01H
[1027]    0660: E8 0B 00                              	CALL LCD_CMD
[1028]        :                                       	
[1029]    0663: B4 06                                 	MOV AH,06H
[1030]    0665: E8 06 00                              	CALL LCD_CMD
[1031]    0668: C6 06 19 00 00                        	MOV PORTB_VAL, 00H
[1032]        :                                       
[1033]        :                                       	
[1034]    066D: C3                                    	RET	
[1035]        :                                       LCD_INIT ENDP
[1036]        :                                       
[1037]        :                                       ;sends commands to LCD
[1038]    066E:                                       LCD_CMD PROC
[1039]    066E: 52                                    PUSH DX
[1040]    066F: 50                                    PUSH AX
[1041]        :                                       
[1042]    0670: A0 19 00                              MOV AL, PORTB_VAL
[1043]    0673: 24 3F                                 AND AL, 3FH     ;  EN(7), RS(6), RW(5)
[1044]    0675: E8 D7 00                              CALL OUT_B
[1045]        :                                       
[1046]    0678: 8A C4                                 MOV AL, AH
[1047]    067A: E8 DC 00                              CALL OUT_C
[1048]        :                                       
[1049]    067D: A0 19 00                              MOV AL, PORTB_VAL
[1050]    0680: 0C 80                                 OR  AL, 80H
[1051]    0682: E8 CA 00                              CALL OUT_B
[1052]        :                                       
[1053]    0685: B9 32 00                              MOV CX, 50
[1054]    0688: E8 98 FF                              CALL DELAY
[1055]        :                                       
[1056]    068B: A0 19 00                              MOV AL, PORTB_VAL
[1057]    068E: 24 7F                                 AND AL, 7FH
[1058]    0690: E8 BC 00                              CALL OUT_B
[1059]        :                                       
[1060]    0693: B9 32 00                              MOV CX, 50
[1061]    0696: E8 8A FF                              CALL DELAY
[1062]        :                                       
[1063]    0699: 58                                    POP AX
[1064]    069A: 5A                                    POP DX
[1065]    069B: C3                                    RET
[1066]        :                                       LCD_CMD ENDP
[1067]        :                                       
[1068]    069C:                                       LCD_CLEAR PROC
[1069]    069C: B4 01                                 	MOV AH,1
[1070]    069E: E8 CD FF                              	CALL LCD_CMD
[1071]    06A1: C3                                    	RET	
[1072]        :                                       LCD_CLEAR ENDP
[1073]        :                                       
[1074]    06A2:                                       LCD_WRITE_CHAR PROC
[1075]    06A2: 50                                    PUSH AX
[1076]    06A3: 52                                    PUSH DX
[1077]        :                                       
[1078]        :                                       ; RS
[1079]    06A4: A0 19 00                              MOV AL, PORTB_VAL
[1080]    06A7: 0C 40                                 OR AL, 40H
[1081]    06A9: E8 A3 00                              CALL OUT_B
[1082]        :                                       
[1083]    06AC: 8A C4                                 MOV AL, AH
[1084]    06AE: E8 A8 00                              CALL OUT_C
[1085]        :                                       
[1086]        :                                       ; EN
[1087]    06B1: A0 19 00                              MOV AL, PORTB_VAL
[1088]    06B4: 0C 80                                 OR AL, 80H
[1089]    06B6: E8 96 00                              CALL OUT_B
[1090]        :                                       
[1091]    06B9: B9 32 00                              MOV CX, 50
[1092]    06BC: E8 64 FF                              CALL DELAY
[1093]        :                                       
[1094]    06BF: A0 19 00                              MOV AL, PORTB_VAL
[1095]    06C2: 24 7F                                 AND AL, 7FH
[1096]    06C4: E8 88 00                              CALL OUT_B
[1097]        :                                       
[1098]    06C7: 5A                                    POP DX
[1099]    06C8: 58                                    POP AX
[1100]    06C9: C3                                    RET
[1101]        :                                       LCD_WRITE_CHAR ENDP
[1102]        :                                       
[1103]    06CA:                                       LCD_PRINTSTR PROC
[1104]        :                                       ; input: SI = string address, ends with '$'
[1105]        :                                       ; output: none
[1106]        :                                       
[1107]    06CA: 56                                    	PUSH SI
[1108]    06CB: 50                                    	PUSH AX
[1109]        :                                       
[1110]    06CC:                                       @LCD_PRINTSTR_LT:
[1111]    06CC: AC                                    	LODSB             ; AL ? [SI], SI++
[1112]    06CD: 3C 24                                 	CMP AL, '$'
[1113]    06CF: 74 07                                 	JE @LCD_PRINTSTR_EXIT
[1114]        :                                       
[1115]    06D1: 8A E0                                 	MOV AH, AL        ; AL ? AH LCD_WRITE_CHAR
[1116]    06D3: E8 CC FF                              	CALL LCD_WRITE_CHAR
[1117]    06D6: EB F4                                 	JMP @LCD_PRINTSTR_LT
[1118]        :                                       
[1119]    06D8:                                       @LCD_PRINTSTR_EXIT:
[1120]    06D8: 58                                    	POP AX
[1121]    06D9: 5E                                    	POP SI
[1122]    06DA: C3                                    	RET
[1123]        :                                       LCD_PRINTSTR ENDP
[1124]        :                                       
[1125]        :                                       ;----------------------------
[1126]    06DB:                                       LCD_PRINT_NUM PROC
[1127]    06DB: 50                                    	PUSH AX
[1128]    06DC: 53                                    	PUSH BX
[1129]    06DD: 51                                    	PUSH CX
[1130]    06DE: 52                                    	PUSH DX
[1131]    06DF: 56                                    	PUSH SI
[1132]        :                                       
[1133]    06E0: BE 2C 00                              	MOV SI, OFFSET NUM_BUF+5
[1134]    06E3: B9 00 00                              	MOV CX, 0
[1135]        :                                       
[1136]    06E6: BB 0A 00                              	MOV BX, 10
[1137]        :                                       
[1138]    06E9: 3D 00 00                              	CMP AX, 0
[1139]    06EC: 75 09                                 	JNE @CONVERT
[1140]        :                                       
[1141]    06EE: C6 04 30                              	MOV BYTE PTR [SI], '0'
[1142]    06F1: 4E                                    	DEC SI
[1143]    06F2: B9 01 00                              	MOV CX, 1
[1144]    06F5: EB 0F                                 	JMP @DONE_CONVERT
[1145]        :                                       
[1146]    06F7:                                       @CONVERT:
[1147]    06F7:                                       	@LOOP_CONVERT:
[1148]    06F7: 33 D2                                 		XOR DX, DX
[1149]    06F9: F7 F3                                 		DIV BX            ; AX / 10 => AL=quotient, DX=remainder
[1150]    06FB: 80 C2 30                              		ADD DL, '0'
[1151]    06FE: 88 14                                 		MOV [SI], DL
[1152]    0700: 4E                                    		DEC SI
[1153]    0701: 41                                    		INC CX
[1154]    0702: 85 C0                                 		TEST AX, AX
[1155]    0704: 75 F1                                 		JNZ @LOOP_CONVERT
[1156]        :                                       
[1157]    0706:                                       @DONE_CONVERT:
[1158]    0706: C6 06 2D 00 24                        	MOV BYTE PTR NUM_BUF+5+1, '$'
[1159]        :                                       
[1160]    070B: 8D 74 01                              	LEA SI, [SI+1]
[1161]    070E: E8 B9 FF                              	CALL LCD_PRINTSTR
[1162]        :                                       
[1163]    0711: 5E                                    	POP SI
[1164]    0712: 5A                                    	POP DX
[1165]    0713: 59                                    	POP CX
[1166]    0714: 5B                                    	POP BX
[1167]    0715: 58                                    	POP AX
[1168]    0716: C3                                    	RET
[1169]        :                                       LCD_PRINT_NUM ENDP
[1170]        :                                       
[1171]        :                                       ;sets the cursor
[1172]    0717:                                       LCD_SET_CUR PROC
[1173]        :                                       ;input: DL=ROW, DH=COL
[1174]        :                                       ;		DL = 1, means upper row
[1175]        :                                       ;		DL = 2, means lower row
[1176]        :                                       ;		DH = 1-8, 1st column is 1
[1177]        :                                       ;output: none
[1178]        :                                       
[1179]        :                                       
[1180]        :                                       ;save registers
[1181]    0717: 50                                    	PUSH AX
[1182]        :                                       ;LCD uses 0 based column index
[1183]    0718: FE CE                                 	DEC DH
[1184]        :                                       ;select case	
[1185]    071A: 80 FA 01                              	CMP DL,1
[1186]    071D: 74 07                                 	JE	@ROW1
[1187]    071F: 80 FA 02                              	CMP DL,2
[1188]    0722: 74 06                                 	JE	@ROW2
[1189]    0724: EB 0D                                 	JMP @LCD_SET_CUR_END
[1190]        :                                       	
[1191]        :                                       ;if DL==1 then
[1192]    0726:                                       	@ROW1:
[1193]    0726: B4 80                                 		MOV AH,80H
[1194]    0728: EB 04                                 	JMP @LCD_SET_CUR_ENDCASE
[1195]        :                                       	
[1196]        :                                       ;if DL==2 then
[1197]    072A:                                       	@ROW2:
[1198]    072A: B4 C0                                 		MOV AH,0C0H
[1199]    072C: EB 00                                 	JMP @LCD_SET_CUR_ENDCASE
[1200]        :                                       		
[1201]        :                                       ;execute the command
[1202]    072E:                                       	@LCD_SET_CUR_ENDCASE:	
[1203]    072E: 02 E6                                 	ADD AH,DH
[1204]    0730: E8 3B FF                              	CALL LCD_CMD
[1205]        :                                       	
[1206]        :                                       ;exit from procedure
[1207]    0733:                                       	@LCD_SET_CUR_END:
[1208]    0733: 58                                    	POP AX
[1209]    0734: C3                                    	RET
[1210]        :                                       LCD_SET_CUR ENDP
[1211]        :                                       
[1212]    0735:                                       LCD_SHOW_CUR PROC
[1213]        :                                       ;input: none
[1214]        :                                       ;output: none
[1215]    0735: 50                                    	PUSH AX
[1216]    0736: B4 0F                                 	MOV AH,0FH
[1217]    0738: E8 33 FF                              	CALL LCD_CMD
[1218]    073B: 58                                    	POP AX
[1219]    073C: C3                                    	RET
[1220]        :                                       LCD_SHOW_CUR ENDP
[1221]        :                                       
[1222]        :                                       
[1223]    073D:                                       LCD_HIDE_CUR PROC
[1224]        :                                       ;input: none
[1225]        :                                       ;output: none
[1226]    073D: 50                                    	PUSH AX
[1227]    073E: B4 0C                                 	MOV AH,0CH
[1228]    0740: E8 2B FF                              	CALL LCD_CMD
[1229]    0743: 58                                    	POP AX
[1230]    0744: C3                                    	RET
[1231]        :                                       LCD_HIDE_CUR ENDP
[1232]        :                                       
[1233]        :                                       
[1234]    0745:                                       OUT_A PROC
[1235]        :                                       ;input: AL
[1236]        :                                       ;output: PORTB_VAL	
[1237]    0745: 52                                    	PUSH DX
[1238]    0746: BA 20 00                              	MOV DX,PORT_A1
[1239]    0749: EE                                    	OUT DX,AL
[1240]    074A: A2 18 00                              	MOV PORTA_VAL,AL
[1241]    074D: 5A                                    	POP DX
[1242]    074E: C3                                    	RET
[1243]        :                                       OUT_A ENDP
[1244]        :                                       
[1245]    074F:                                       OUT_B PROC
[1246]        :                                       ;input: AL
[1247]        :                                       ;output: PORTB_VAL	
[1248]    074F: 52                                    	PUSH DX
[1249]    0750: BA 22 00                              	MOV DX,PORT_B1
[1250]    0753: EE                                    	OUT DX,AL
[1251]    0754: A2 19 00                              	MOV PORTB_VAL,AL
[1252]    0757: 5A                                    	POP DX
[1253]    0758: C3                                    	RET
[1254]        :                                       OUT_B ENDP
[1255]        :                                       
[1256]    0759:                                       OUT_C PROC
[1257]        :                                       ;input: AL
[1258]        :                                       ;output: PORTC_VAL	
[1259]    0759: 52                                    	PUSH DX
[1260]    075A: BA 24 00                              	MOV DX,PORT_C1
[1261]    075D: EE                                    	OUT DX,AL
[1262]    075E: A2 1A 00                              	MOV PORTC_VAL,AL
[1263]    0761: 5A                                    	POP DX
[1264]    0762: C3                                    	RET
[1265]        :                                       OUT_C ENDP
[1266]        :                                       
[1267]        :                                       ;====================================================== TIMER ======================================================
[1268]        :                                       
[1269]    0763:                                       SEND_TO_TIMER PROC
[1270]        :                                       
[1271]    0763:                                       TIMER_LOOP:
[1272]        :                                       ; If stop button is pressed for some ms or high temp stays more that 10 seconds, we will exit and halt.
[1273]    0763: E8 EC FD                              CALL CHECK_SYSTEM
[1274]    0766: 80 3E 05 00 01                        CMP stop_pressed, 1
[1275]    076B: 74 27                                 JE EXIT_PROGRAM
[1276]        :                                       
[1277]    076D: E8 25 00                              CALL UPDATE_DISPLAY
[1278]        :                                       
[1279]        :                                       ; If time calculated is 0, then just exit and don't count a sec.
[1280]        :                                       ;This happens when you the first countdown is completed and we call system_reset and we want to reset the seven segs too.\
[1281]    0770: 83 3E 09 00 00                        CMP duration_val, 0
[1282]    0775: 74 1D                                 JE EXIT_PROGRAM
[1283]        :                                       
[1284]    0777: E8 C2 00                              CALL DELAY_1SEC
[1285]    077A: E8 8C 00                              CALL DECREMENT_TIME
[1286]        :                                       
[1287]    077D: 80 3E 0D 00 00                        CMP duration_hr, 0
[1288]    0782: 75 DF                                 JNE TIMER_LOOP
[1289]    0784: 80 3E 0C 00 00                        CMP duration_min, 0
[1290]    0789: 75 D8                                 JNE TIMER_LOOP
[1291]    078B: 80 3E 0B 00 00                        CMP duration_sec, 0
[1292]    0790: 75 D1                                 JNE TIMER_LOOP
[1293]        :                                       
[1294]    0792: EB 00                                 JMP EXIT_PROGRAM
[1295]        :                                       
[1296]    0794:                                       EXIT_PROGRAM:
[1297]    0794: C3                                    RET
[1298]        :                                       SEND_TO_TIMER ENDP
[1299]        :                                       
[1300]    0795:                                       UPDATE_DISPLAY PROC
[1301]    0795: 50                                    PUSH AX
[1302]    0796: 53                                    PUSH BX
[1303]    0797: 51                                    PUSH CX
[1304]    0798: 52                                    PUSH DX
[1305]    0799: 56                                    PUSH SI
[1306]        :                                       
[1307]        :                                       ; ===== Display HOURS =====
[1308]    079A: A0 0D 00                              MOV   AL, duration_hr
[1309]    079D: 32 E4                                 XOR   AH, AH         ; <? clear AH before dividing
[1310]    079F: B3 0A                                 MOV   BL, 10
[1311]    07A1: F6 F3                                 DIV   BL             ; AL = tens, AH = units
[1312]        :                                       
[1313]    07A3: BE 4E 00                              MOV   SI, OFFSET SEG_TABLE
[1314]    07A6: 8A D8                                 MOV   BL, AL         ; tens digit
[1315]    07A8: B7 00                                 MOV   BH, 0
[1316]    07AA: 03 F3                                 ADD   SI, BX
[1317]    07AC: 8A 04                                 MOV   AL, [SI]
[1318]    07AE: E6 40                                 OUT   PORTA3, AL        ; Hours tens
[1319]        :                                       
[1320]    07B0: 8A DC                                 MOV   BL, AH         ; units digit
[1321]    07B2: B7 00                                 MOV   BH, 0
[1322]    07B4: BE 4E 00                              MOV   SI, OFFSET SEG_TABLE
[1323]    07B7: 03 F3                                 ADD   SI, BX
[1324]    07B9: 8A 04                                 MOV   AL, [SI]
[1325]    07BB: E6 42                                 OUT   PORTB3, AL        ; Hours units
[1326]        :                                       
[1327]        :                                       ; ===== Display MINUTES =====
[1328]    07BD: A0 0C 00                              MOV   AL, duration_min
[1329]    07C0: 32 E4                                 XOR   AH, AH         ; <? clear before DIV
[1330]    07C2: B3 0A                                 MOV   BL, 10
[1331]    07C4: F6 F3                                 DIV   BL             ; AL = tens, AH = units
[1332]        :                                       
[1333]    07C6: BE 4E 00                              MOV   SI, OFFSET SEG_TABLE
[1334]    07C9: 8A D8                                 MOV   BL, AL         ; minutes-tens
[1335]    07CB: B7 00                                 MOV   BH, 0
[1336]    07CD: 03 F3                                 ADD   SI, BX
[1337]    07CF: 8A 04                                 MOV   AL, [SI]
[1338]    07D1: E6 44                                 OUT   PORTC3, AL        ; Minutes tens
[1339]        :                                       
[1340]    07D3: 8A DC                                 MOV   BL, AH         ; minutes-units
[1341]    07D5: B7 00                                 MOV   BH, 0
[1342]    07D7: BE 4E 00                              MOV   SI, OFFSET SEG_TABLE
[1343]    07DA: 03 F3                                 ADD   SI, BX
[1344]    07DC: 8A 04                                 MOV   AL, [SI]
[1345]    07DE: E6 50                                 OUT   PORTA4, AL        ; Minutes units
[1346]        :                                       
[1347]        :                                       ; ===== Display SECONDS =====
[1348]    07E0: A0 0B 00                              MOV   AL, duration_sec
[1349]    07E3: 32 E4                                 XOR   AH, AH         ; <? clear before DIV
[1350]    07E5: B3 0A                                 MOV   BL, 10
[1351]    07E7: F6 F3                                 DIV   BL             ; AL = tens, AH = units
[1352]        :                                       
[1353]    07E9: BE 4E 00                              MOV   SI, OFFSET SEG_TABLE
[1354]    07EC: 8A D8                                 MOV   BL, AL         ; seconds-tens
[1355]    07EE: B7 00                                 MOV   BH, 0
[1356]    07F0: 03 F3                                 ADD   SI, BX
[1357]    07F2: 8A 04                                 MOV   AL, [SI]
[1358]    07F4: E6 54                                 OUT   PORTC4, AL        ; Seconds tens
[1359]        :                                       
[1360]    07F6: 8A DC                                 MOV   BL, AH         ; seconds-units
[1361]    07F8: B7 00                                 MOV   BH, 0
[1362]    07FA: BE 4E 00                              MOV   SI, OFFSET SEG_TABLE
[1363]    07FD: 03 F3                                 ADD   SI, BX
[1364]    07FF: 8A 04                                 MOV   AL, [SI]
[1365]    0801: E6 52                                 OUT   PORTB4, AL        ; Seconds units
[1366]        :                                       
[1367]        :                                       
[1368]    0803: 5E                                    POP SI
[1369]    0804: 5A                                    pop DX
[1370]    0805: 59                                    pop CX
[1371]    0806: 5B                                    pop BX
[1372]    0807: 58                                    pop AX
[1373]    0808: C3                                    RET
[1374]        :                                       UPDATE_DISPLAY ENDP
[1375]        :                                       
[1376]    0809:                                       DECREMENT_TIME PROC
[1377]    0809: 50                                    PUSH AX
[1378]    080A: FE 0E 0B 00                           DEC duration_sec
[1379]    080E: 80 3E 0B 00 FF                        CMP duration_sec, 0FFH
[1380]    0813: 75 25                                 JNE DONE
[1381]    0815: C6 06 0B 00 3B                        MOV duration_sec, 59
[1382]    081A: FE 0E 0C 00                           DEC duration_min
[1383]    081E: 80 3E 0C 00 FF                        CMP duration_min, 0FFH
[1384]    0823: 75 15                                 JNE DONE
[1385]    0825: C6 06 0C 00 3B                        MOV duration_min, 59
[1386]    082A: FE 0E 0D 00                           DEC duration_hr
[1387]    082E: 80 3E 0D 00 FF                        CMP duration_hr, 0FFH
[1388]    0833: 75 05                                 JNE DONE
[1389]    0835: C6 06 0D 00 00                        MOV duration_hr, 0
[1390]    083A:                                       DONE:
[1391]    083A: 58                                    POP AX
[1392]    083B: C3                                    RET
[1393]        :                                       DECREMENT_TIME ENDP
[1394]        :                                       
[1395]    083C:                                       DELAY_1SEC PROC
[1396]    083C: 51                                    PUSH CX
[1397]    083D: B9 C8 00                              MOV CX, 200
[1398]    0840:                                       DELAY_LOOP:
[1399]    0840: E8 04 00                              CALL DELAY_1MS
[1400]    0843: E2 FB                                 LOOP DELAY_LOOP
[1401]    0845: 59                                    POP CX
[1402]    0846: C3                                    RET
[1403]        :                                       DELAY_1SEC ENDP
[1404]        :                                       
[1405]        :                                       ; 1 ms delay (roughly)
[1406]    0847:                                       DELAY_1MS PROC
[1407]    0847: 51                                    PUSH CX
[1408]    0848: B9 E8 03                              MOV CX, 1000
[1409]    084B:                                       DELAY1MS_LOOP:
[1410]    084B: 90                                    NOP
[1411]    084C: E2 FD                                 LOOP DELAY1MS_LOOP
[1412]    084E: 59                                    POP CX
[1413]    084F: C3                                    RET
[1414]        :                                       DELAY_1MS ENDP
[1415]        :                                       
[1416]        :                                       
[1417]        :                                       
[1418]        :                                       ; _________ Reset all outputs and memory vars when system stops _________
[1419]    0850:                                       RESET_OUTPUTS PROC
[1420]        :                                       ; Status flags restarted
[1421]    0850: C6 06 06 00 00                        MOV system_running, 0
[1422]    0855: C6 06 05 00 00                        MOV stop_pressed, 0
[1423]        :                                       
[1424]    085A: C6 06 59 00 00                        MOV temp_alerted, 0
[1425]    085F: C6 06 58 00 00                        MOV temp_sec_alert, 0
[1426]        :                                       
[1427]        :                                       ; Saved values cleared
[1428]    0864: C7 06 07 00 00 00                     MOV spin_speed_val, 0
[1429]    086A: C7 06 09 00 00 00                     MOV duration_val, 0
[1430]        :                                       
[1431]    0870: C6 06 0D 00 00                        MOV duration_hr, 0
[1432]    0875: C6 06 0C 00 00                        MOV duration_min, 0
[1433]    087A: C6 06 0B 00 00                        MOV duration_sec, 0
[1434]        :                                       
[1435]        :                                       ; CALL SEND_TO_LCD
[1436]        :                                       ;Setting 7segs to 00:00:00
[1437]    087F: E8 E1 FE                              CALL SEND_TO_TIMER
[1438]        :                                       
[1439]        :                                       ; CLEARING RULE BASE
[1440]    0882: 57                                    PUSH DI
[1441]    0883: 51                                    PUSH CX
[1442]        :                                       
[1443]    0884: B9 0A 00                              MOV CX, 10
[1444]    0887: BF 0E 00                              LEA DI, rule_strength
[1445]        :                                       
[1446]    088A:                                       CLEAR_ARRAY_LOOP:
[1447]    088A: C6 05 00                              MOV BYTE PTR [DI], 0
[1448]    088D: 47                                    INC DI
[1449]    088E: E2 FA                                 LOOP CLEAR_ARRAY_LOOP
[1450]        :                                       
[1451]    0890: 59                                    POP CX
[1452]    0891: 5F                                    POP DI
[1453]        :                                       
[1454]        :                                       
[1455]    0892: C3                                    RET
[1456]        :                                       RESET_OUTPUTS ENDP
[1457]        :                                       
[1458]        :                                       ;A proc that causes delay
[1459]    0893:                                       DELAY20 PROC
[1460]    0893: 51                                    PUSH CX
[1461]    0894: 52                                    PUSH DX
[1462]        :                                       
[1463]    0895: B9 E8 03                              MOV CX, 1000      ; Outer loop
[1464]    0898:                                       DELAY20_OUTER:
[1465]    0898: BA 64 00                              MOV DX, 100       ; Inner loop
[1466]    089B:                                       DELAY20_INNER:
[1467]    089B: 90                                    NOP               ; No operation, wastes 1 cycle
[1468]    089C: 4A                                    DEC DX
[1469]    089D: 75 FC                                 JNZ DELAY20_INNER
[1470]        :                                       
[1471]    089F: E2 F7                                 LOOP DELAY20_OUTER
[1472]        :                                       
[1473]    08A1: 5A                                    POP DX
[1474]    08A2: 59                                    POP CX
[1475]    08A3: C3                                    RET
[1476]        :                                       DELAY20 ENDP
[1477]        :                                       
[1478]    08A4:                                       CONVERT_DURATION PROC
[1479]    08A4: 50                                    PUSH AX
[1480]    08A5: 53                                    PUSH BX
[1481]    08A6: 52                                    PUSH DX
[1482]        :                                       
[1483]        :                                       ; Load duration_val (in seconds)
[1484]    08A7: A1 09 00                              MOV AX, duration_val
[1485]        :                                       
[1486]        :                                       ; Compute hours: AX / 3600
[1487]    08AA: BB 10 0E                              MOV BX, 3600
[1488]    08AD: 33 D2                                 XOR DX, DX
[1489]    08AF: F7 F3                                 DIV BX                ; AX / 3600 ? AX = hours, DX = remainder
[1490]    08B1: A2 0D 00                              MOV duration_hr, AL   ; store hours
[1491]    08B4: 8B C2                                 MOV AX, DX            ; remainder seconds
[1492]        :                                       
[1493]        :                                       ; Compute minutes: AX / 60
[1494]    08B6: BB 3C 00                              MOV BX, 60
[1495]    08B9: 33 D2                                 XOR DX, DX
[1496]    08BB: F7 F3                                 DIV BX                ; AX / 60 ? AX = minutes, DX = seconds
[1497]    08BD: A2 0C 00                              MOV duration_min, AL  ; store minutes
[1498]    08C0: 88 16 0B 00                           MOV duration_sec, DL  ; store seconds
[1499]        :                                       
[1500]    08C4: 5A                                    POP DX
[1501]    08C5: 5B                                    POP BX
[1502]    08C6: 58                                    POP AX
[1503]    08C7: C3                                    RET
[1504]        :                                       CONVERT_DURATION ENDP
[1505]        :                                       
[1506]        :                                       END MAIN
[1507]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: C8      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 06      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 02      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: FA      -   check sum (l.byte)
0013: 3A      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 16      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 16      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022: 77      -   relocation table - offset inside segment (l.byte)
0023: 04      -   relocation table - offset inside segment (h.byte)
0024: 16      -   relocation table - segment anchor (l.byte)
0025: 00      -   relocation table - segment anchor (h.byte)
0026 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
